type NodeClass;

// Non terminals from the PCFG grammar 
distinct NodeClass S, A, B, C, a, b, c, d, e;

random RealMatrix Sentence(Integer level) ~
	if level == 0 then vstack(0.0)
	else if FirstNontermial(Sentence(level - 1)) == null then Sentence(level - 1)
	else vstack(submat(Sentence(level - 1), 0, FirstNontermial(Sentence(level - 1)) - 1, 0, 0), ExpansionApplied(RealToNodeClass(FirstNontermial(Sentence(level - 1)))), submat(Sentence(level - 1), FirstNontermial(Sentence(level - 1)) + 1, numcols(Sentence(level - 1)) - 1, 0, 0));

fixed NodeClass RealToNodeClass(Real num) = 
	if num == 0.0 then S
	else if num == -1.0 then A
	else if num == -2.0 then B
	else if num == -3.0 then C
	else if num == 1.0 then a
	else if num == 2.0 then b
	else if num == 3.0 then c
	else if num == 4.0 then d
	else if num == 5.0 then e;

fixed Integer FindFirstNonterminal(RealMatrix sen, Integer index) = 
	if sen[0][0] <= 0.0 then 0
	else if numcols(sen) == 1 then null
	else if FindFirstNonterminal(submat(sen, 1, numcols(sen) - 1, 0, 0), ???) == null then null
	else FindFirstNonterminal(submat(sen, 1, numcols(sen) - 1, 0, 0), ???) + 1;

fixed Integer FirstNontermial(RealMatrix sen) = 
	FindFirstNonterminal(sen, 0);



random RealMatrix ExpansionApplied(NodeClass node) ~ 
	if node == S then 
		Categorical({vstack(-1.0, -2.0) -> 0.25,
						vstack(-2.0, -3.0) -> 0.2,
						vstack(-1.0, -3.0) -> 0.4,
						vstack(-3.0, -1.0) -> 0.15})
	else if node == A then
		Categorical({vstack(1.0) -> 0.05,
						vstack(2.0) -> 0.3,
						vstack(-1.0, -2.0) -> 0.1625,
						vstack(-2.0, -3.0) -> 0.13,
						vstack(-1.0, -3.0) -> 0.26,
						vstack(-3.0, -1.0) -> 0.0975})
	else if node == B then
		Categorical({vstack(2.0) -> 0.5,
						vstack(3.0) -> 0.3,
						vstack(4.0) -> 0.2})
	else if node == C then
		Categorical({vstack(4.0) -> 0.35,
						vstack(5.0) -> 0.1,
						vstack(-1.0, -2.0) -> 0.1375,
						vstack(-2.0, -3.0) -> 0.11,
						vstack(-1.0, -3.0) -> 0.22,
						vstack(-3.0, -1.0) -> 0.0825});

query Sentence(8);