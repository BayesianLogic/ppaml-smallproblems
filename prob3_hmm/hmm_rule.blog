type State;
distinct State state[6];

type Output;
distinct Output result[6];

random State S(Timestep t) ~
    if t == @0 then state[1]
    else case S(prev(t)) in
      {state[1] -> Categorical({state[1] -> (1.0/3.0), state[2] -> (1.0/3.0), state[3] -> (1.0/3.0)}),
       state[2] -> Categorical({state[2] -> (1.0/3.0), state[3] -> (1.0/3.0), state[4] -> (1.0/3.0)}),
       state[3] -> Categorical({state[3] -> (1.0/3.0), state[4] -> (1.0/3.0), state[4] -> (1.0/3.0)}),
       state[4] -> Categorical({state[4] -> (1.0/3.0), state[5] -> (1.0/3.0), state[1]-> (1.0/3.0)}),
       state[5] -> Categorical({state[5] -> (1.0/3.0), state[1] -> (1.0/3.0), state[2] -> (1.0/3.0)})}
    ;

random Output O(Timestep t)
   ~ case S(t) in
     {state[1] -> Categorical({result[1] -> 0.6, result[2] -> 0.1, result[3] -> 0.1, result[4] -> 0.1, result[5] -> 0.1}),
      state[2] -> Categorical({result[1] -> 0.1, result[2] -> 0.6, result[3] -> 0.1, result[4] -> 0.1, result[5] -> 0.1}),
      state[3] -> Categorical({result[1] -> 0.1, result[2] -> 0.1, result[3] -> 0.6, result[4] -> 0.1, result[5] -> 0.1}),
      state[4] -> Categorical({result[1] -> 0.1, result[2] -> 0.1, result[3] -> 0.1, result[4] -> 0.6, result[5] -> 0.1}),
      state[5] -> Categorical({result[1] -> 0.1, result[2] -> 0.1, result[3] -> 0.1, result[4] -> 0.1, result[5] -> 0.6})}
    ;